import Head from "next/head";
import { Inter } from "@next/font/google";
import { Hero } from "@/components/home-sections/Hero";
import { Menu } from "@/components/home-sections/menu/Menu";
import { HowWeDo } from "@/components/home-sections/HowWeDo";
import { Testimonial } from "@/components/home-sections/Testimonial";
import { Contact } from "@/components/home-sections/Contact";
import axiosInstance from "@/utilities/axiosInstance";
import { useEffect } from "react";
import { useGlobalData } from "@/context/context";


const inter = Inter({ subsets: ["latin"] });

export default function Home({company = {}, menus = [], headings = {}}) {
    const { main_desc = ''} = headings
    console.log(main_desc)
    const {globalData, setGlobalData} = useGlobalData()
    useEffect(() => {
        setGlobalData({...globalData, ...{company, cmsPath:process.env.NEXT_PUBLIC_API_URL} })
    },[company])
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Hero data={{main_desc}} />
            <Menu data={menus}/>
            <HowWeDo />
            <Testimonial />
            <Contact />
            {/* <h1 className='bg-orange-500 text-slate-300'>Resto</h1> */}
        </>
    );
}

export async function getStaticProps() {
    let attributes = {}
    try {
        const response = await axiosInstance.get('company?populate=*')
        attributes = response?.data?.data?.attributes ?? {}
    } catch (error) {
        
    }

    let menus = {}
    try {
        const response = await axiosInstance.get('menus?populate=*,dish.dish_img')
        menus = response?.data?.data ?? {}
    } catch (error) {
        
    }

    let headings = {}
    try {
        const response = await axiosInstance.get('heading?populate=*')
        headings = response?.data?.data?.attributes ?? {}
    } catch (error) {
        
    }
    return {
        props: {
            company: attributes,
            menus,
            headings
        },
        revalidate: 10
    }
  }